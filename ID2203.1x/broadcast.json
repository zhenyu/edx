{"paragraphs":[{"text":"%md\n\n### From Best Effort to Causal Order Reliable Broadcast\n\nThis is the first programming assignment where you will have to build and reuse multiple components. \nStarting bottom-up, you will first have to implement *best effort broadcast*, then *reliable broadcast* and finally *causal order reliable broadcast*.\nMind that passing each component check will give you a **partial** grade and therefore you will need to pass **all** checks to get the full grade for this programming assignment.\n\n**Things to Remember**:\n1. Some components such as `PerfectLink`,  `Network` and `Timer` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied before exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n7. Do **not** submit just the grading token to edx. You will have to submit the whole exported notebook content to get your grade.\n\nGood luck! :)","user":"anonymous","dateUpdated":"2017-11-13T18:43:38+0000","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>From Best Effort to Causal Order Reliable Broadcast</h3>\n<p>This is the first programming assignment where you will have to build and reuse multiple components.<br/>Starting bottom-up, you will first have to implement <em>best effort broadcast</em>, then <em>reliable broadcast</em> and finally <em>causal order reliable broadcast</em>.<br/>Mind that passing each component check will give you a <strong>partial</strong> grade and therefore you will need to pass <strong>all</strong> checks to get the full grade for this programming assignment.</p>\n<p><strong>Things to Remember</strong>:<br/>1. Some components such as <code>PerfectLink</code>, <code>Network</code> and <code>Timer</code> are already provided. No need to implement them.<br/>2. Execute the imports defined below <strong>before</strong> compiling your component implementations.<br/>3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.<br/>4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s&quot;Process $self delivers message $msg&quot;);</code><br/>5. Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.<br/>5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied before exporting and submitting the notebook.<br/>6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)<br/>7. Do <strong>not</strong> submit just the grading token to edx. You will have to submit the whole exported notebook content to get your grade.</p>\n<p>Good luck! :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510084541335_-1006808970","id":"20160915-144724_1712226433","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:43:38+0000","dateFinished":"2017-11-13T18:43:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3129"},{"text":"import se.kth.edx.id2203.core.ExercisePrimitives._\nimport se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl.{Init, _}\nimport se.sics.kompics.{ComponentDefinition => _, Port => _, KompicsEvent}\n\nimport scala.collection.immutable.Set\nimport scala.collection.mutable.ListBuffer","user":"anonymous","dateUpdated":"2017-11-13T18:43:42+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.ExercisePrimitives._<br />import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl.{Init, _}<br />import se.sics.kompics.{ComponentDefinition=>_, Port=>_, KompicsEvent}<br />import scala.collection.immutable.Set<br />import scala.collection.mutable.ListBuffer<br />"}]},"apps":[],"jobName":"paragraph_1510084541336_-1008732714","id":"20160728-150612_1687562708","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:43:42+0000","dateFinished":"2017-11-13T18:43:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3130"},{"text":"%md\n\n### Part I: Best-Effort Broadcast ###\n\nA Best-Effort Broadcast Abstraction (BEB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class BestEffortBroadcast extends Port {\n     indication[BEB_Deliver];\n     request[BEB_Broadcast];\n    }\n\nA **BEB** component should request `BEB_Broadcast` and indicate `BEB_Deliver` events as defined below:\n\n     case class BEB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n     case class BEB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n\n\nAs you have already learnt from the course lectures, Best-Effort Broadcast should satisfy the following properties:\n\n1. **Validity**:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. **No duplication**: *No message is delivered more than once.*\n3. **No creation**: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n\nHINT: The recommended algorithm to use in this assignment is *Basic Broadcast* and is described in the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/a91e7d1ac75367325c1efd101a9e2138/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/basicbroadcast.pdf) in the respective lecture.\n","user":"anonymous","dateUpdated":"2017-11-13T18:43:50+0000","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Part I: Best-Effort Broadcast</h3>\n<p>A Best-Effort Broadcast Abstraction (BEB), in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class BestEffortBroadcast extends Port {\n indication[BEB_Deliver];\n request[BEB_Broadcast];\n}\n</code></pre>\n<p>A <strong>BEB</strong> component should request <code>BEB_Broadcast</code> and indicate <code>BEB_Deliver</code> events as defined below:</p>\n<pre><code> case class BEB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n case class BEB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Best-Effort Broadcast should satisfy the following properties:</p>\n<ol>\n  <li><strong>Validity</strong>: <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n  <li><strong>No duplication</strong>: <em>No message is delivered more than once.</em></li>\n  <li><strong>No creation</strong>: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Basic Broadcast</em> and is described in the following <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/a91e7d1ac75367325c1efd101a9e2138/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/basicbroadcast.pdf\">document</a> in the respective lecture.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510084541336_-1008732714","id":"20160915-145354_1020037731","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:43:50+0000","dateFinished":"2017-11-13T18:43:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3131"},{"text":"\nclass BasicBroadcast(init: Init[BasicBroadcast]) extends ComponentDefinition {\n\n  //BasicBroadcast Subscriptions\n  val pLink = requires[PerfectLink];\n  val beb = provides[BestEffortBroadcast];\n \n  \n  //BasicBroadcast Component State and Initialization\n  val (self, topology) = init match {\n    case Init(s: Address, t: Set[Address]@unchecked) => (s, t)\n  };\n\n  //BasicBroadcast Event Handlers\n  beb uponEvent {\n    case x: BEB_Broadcast => handle {\n     /* WRITE YOUR CODE HERE  */\n     //trigger(PL_Send(self,x) -> pLink)\n     for(p <- topology){\n         trigger(PL_Send(p,x) -> pLink)\n     }\n    }\n  }\n\n  pLink uponEvent {\n    case PL_Deliver(src, BEB_Broadcast(payload)) => handle {\n     \n     /* WRITE YOUR CODE HERE  */\n     trigger(BEB_Deliver(src,payload) -> beb)\n    }\n  }\n}","user":"anonymous","dateUpdated":"2017-11-13T18:43:54+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class BasicBroadcast<br />"}]},"apps":[],"jobName":"paragraph_1510084541336_-1008732714","id":"20160728-150736_1548510044","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:43:54+0000","dateFinished":"2017-11-13T18:43:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3132"},{"text":"checkBEB[BasicBroadcast]();","user":"anonymous","dateUpdated":"2017-11-13T18:44:08+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔:  Eventually every correct process delivers every message broadcasted by correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">No Duplication-No Creation</td> <td class=\"tg-6k2t\">✔: Every message delivered has been previously broadcasted<br>✔: No duplicate delivered messages found<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Best Effort Broadcast' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,115,81,97,119,102,75,53,100,120,98,87,114,43,43,80,66,115,103,90,54,118,98,50,104,110,55,81,111,67,100,71,83,86,104,68,111,85,122,80,113,102,54,71,71,10,101,83,82,113,65,87,74,53,80,81,88,73,101,87,74,88,98,112,49,103,49,48,65,108,101,72,48,104,103,121,81,108,116,100,49,50,103,86,78,120,48,117,74,74,65,105,108,107,105,78,56,75,55,51,102,65,56,122,100,80,109,90,112,49,10,49,88,56,51,56,51,72,90,70,107,51,99,86,67,114,73,120,108,122,102,113,118,82,55,75,82,66,76,48,56,112,67,110,76,114,87,52,122,80,82,102,89,87,73,86,116,115,120,67,87,55,80,77,81,80,49,52,90,106,105,117,83,98,81,10,104,70,76,86,57,51,67,99,122,50,119,55,103,68,110,69,98,100,70,75,120,73,86,54,89,53,77,122,111,100,103,83,104,107,118,86,113,118,89,107,90,43,109,72,51,102,115,79,86,97,69,101,90,51,77,80,107,89,82,67,77,118,120,117,10,113,100,75,90,56,71,85,110,52,76,78,106,68,122,70,52,76,55,88,119,122,50,107,70,49,50,49,114,75,106,117,120,107,84,97,115,121,86,53,68,89,49,121,53,118,52,97,73,111,67,75,72,74,47,66,54,110,67,121,54,51,76,54,56,10,89,71,109,52,114,100,51,117,120,84,57,97,65,83,74,81,114,83,101,76,118,106,104,117,97,57,110,81,86,90,86,86,86,56,86,50,106,54,43,112,85,80,98,89,71,90,99,70,107,69,108,121,73,103,87,116,72,73,106,111,115,48,104,114,10,67,112,97,72,47,109,85,99,112,87,97,117,65,110,113,120,120,90,110,65,51,78,76,72,50,103,85,65,122,48,111,76,105,102,89,109,56,66,121,100,120,73,54,122,117,119,48,56,110,87,71,57,109,121,56,102,69,78,101,103,107,80,89,51,10,114,81,50,43,101,79,74,50,74,85,52,81,78,99,106,82,50,102,88,49,52,86,69,77,90,97,117,90,70,66,97,67,88,97,50,111,121,73,68,102,51,100,66,86,52,116,73,81,100,48,87,101,51,56,78,57,119,71,87,103,73,79,109,76,10,90,85,57,55,83,113,77,50,106,109,119,105,97,103,77,78,72,66,54,73,113,103,99,68,82,106,122,53,49,90,73,100,75,118,103,85,72,68,54,107,86,49,103,73,109,101,82,55,104,99,83,78,82,122,85,49,108,89,82,78,114,84,67,74,10,87,83,100,118,77,57,51,99,111,110,80,51,78,118,50,110,119,99,104,110,109,115,66,84,53,82,100,82,87,55,112,65,72,69,43,76,107,75,55,55,48,89,70,115,105,120,74,54,87,50,48,74,114,105,118,116,117,76,50,99,54,74,69,68,10,102,80,50,90,112,112,118,121,112,82,54,83,73,69,106,100,50,90,78,107,90,67,108,98,121,113,52,50,80,117,82,70,73,66,110,74,119,115,117,112,107,74,112,55,112,121,73,117,89,87,110,48,122,43,49,50,115,87,116,79,105,108,102,83,10,119,65,48,66,98,51,49,108,47,53,49,86,50,119,107,78,113,52,85,102,47,78,67,115,66,114,109,48,103,78,107,101,79,70,103,100,69,115,70,67,103,80,72,65,57,56,56,68,106,110,107,100,70,73,79,122,53,75,68,98,102,109,88,111,10,51,122,116,55,55,77,47,108,52,72,78,84,69,117,113,75,57,106,114,102,118,79,47,120,55,82,74,105,55,80,89,81,106,66,56,110,116,89,105,55,84,51,114,80,109,99,84,115,69,82,107,78,101,50,116,90,120,50,100,69,52,56,71,111,10,103,104,76,50,74,70,105,78,102,122,100,104,71,65,117,98,67,101,78,99,76,105,86,90,75,105,100,43,43,54,102,77,76,118,78,108,110,51,86,82,118,97,99,120,113,67,49,122,87,73,103,43,72,116,52,74,50,72,103,90,102,85,80,120,10,101,111,56,100,110,48,85,103,108,53,97,110,98,98,86,72,114,68,85,73,84,121,119,69,112,99,111,75,51,75,82,107,57,104,69,90,89,122,74,99,116,81,78,76,77,101,121,73,72,66,67,106,68,99,118,55,106,65,107,78,55,105,70,117,10,102,54,67,43,75,112,68,111,73,119,107,49,102,50,111,109,90,102,75,79,10,61,71,68,57,87,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res0: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1510084541336_-1008732714","id":"20160830-154208_1529541172","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:44:08+0000","dateFinished":"2017-11-13T18:44:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3133"},{"text":"%md\n\n### Part II: Reliable Broadcast ###\n\nA Reliable Broadcast Abstraction (RB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class ReliableBroadcast extends Port {\n      indication[RB_Deliver];\n      request[RB_Broadcast];\n    }\n    \nAn **RB** component should request `RB_Broadcast` and indicate `RB_Deliver` events, as defined below:\n\n    case class RB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\n    case class RB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n       \n\nAs you have already learnt from the course lectures, Reliable Broadcast adds the `Agreement` property into the already existing properties of Best-Effort Broadcast:\n\n1. Validity:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. No duplication: *No message is delivered more than once.*\n3. No creation: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n4. **Agreement**: *If a message m is delivered by some correct process, then m is eventually delivered by every correct process.*\n\nHINT: The recommended algorithm to use in this assignment is *Eager Reliable Broadcast* and is described in page 2 within the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/6c144fd806b3568f6e2c5d7d03e27a29/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/reliablebroadcast.pdf) in the respective lecture.\n\n**Mind that, to complete this part, you will first have to implement and test Best-Effort Broadcast, defined above.**","user":"anonymous","dateUpdated":"2017-11-13T18:44:25+0000","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Part II: Reliable Broadcast</h3>\n<p>A Reliable Broadcast Abstraction (RB), in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class ReliableBroadcast extends Port {\n  indication[RB_Deliver];\n  request[RB_Broadcast];\n}\n</code></pre>\n<p>An <strong>RB</strong> component should request <code>RB_Broadcast</code> and indicate <code>RB_Deliver</code> events, as defined below:</p>\n<pre><code>case class RB_Deliver(source: Address, payload: KompicsEvent) extends KompicsEvent;\ncase class RB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Reliable Broadcast adds the <code>Agreement</code> property into the already existing properties of Best-Effort Broadcast:</p>\n<ol>\n  <li>Validity: <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n  <li>No duplication: <em>No message is delivered more than once.</em></li>\n  <li>No creation: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n  <li><strong>Agreement</strong>: <em>If a message m is delivered by some correct process, then m is eventually delivered by every correct process.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Eager Reliable Broadcast</em> and is described in page 2 within the following <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/6c144fd806b3568f6e2c5d7d03e27a29/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/reliablebroadcast.pdf\">document</a> in the respective lecture.</p>\n<p><strong>Mind that, to complete this part, you will first have to implement and test Best-Effort Broadcast, defined above.</strong></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510084541337_-1009117463","id":"20160915-152029_348185262","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T18:44:25+0000","dateFinished":"2017-11-13T18:44:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3134"},{"text":"\n//Reliable Broadcast\n\nclass EagerReliableBroadcast(init: Init[EagerReliableBroadcast]) extends ComponentDefinition {\n  //EagerReliableBroadcast Subscriptions\n  val beb = requires[BestEffortBroadcast];\n  val rb = provides[ReliableBroadcast];\n\n  //EagerReliableBroadcast Component State and Initialization\n  val self = init match {\n    case Init(s: Address) => s\n  };\n  val delivered = collection.mutable.Set[KompicsEvent]();\n\n  //EagerReliableBroadcast Event Handlers\n  rb uponEvent {\n    case x@RB_Broadcast(payload) => handle {\n     /* WRITE YOUR CODE HERE  */\n     println(s\"Process $self broadcast message $payload\")\n     trigger(BEB_Broadcast(x)->beb)\n    }\n  }\n\n  beb uponEvent {\n    case BEB_Deliver(src, y@RB_Broadcast(payload)) => handle {\n        /* WRITE YOUR CODE HERE  */\n        if(!delivered.contains(payload)) {\n            delivered.add(payload)\n            trigger(RB_Deliver(src,payload)->rb)\n            trigger(BEB_Broadcast(y)->beb)\n        } \n    } \n  }\n}","user":"anonymous","dateUpdated":"2017-11-13T19:30:44+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class EagerReliableBroadcast<br />"}]},"apps":[],"jobName":"paragraph_1510084541337_-1009117463","id":"20160728-150932_1018155040","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T19:30:44+0000","dateFinished":"2017-11-13T19:30:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3135"},{"text":"checkRB[BasicBroadcast,EagerReliableBroadcast]();","user":"anonymous","dateUpdated":"2017-11-13T19:30:48+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔:  Eventually every correct process delivers every message broadcasted by correct processes<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">No Duplication-No Creation</td> <td class=\"tg-6k2t\">✔: Every message delivered has been previously broadcasted<br>✔: No duplicate delivered messages found<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Agreement</td> <td class=\"tg-6k2t\">✔: Every message delivered by a correct process is eventually delivered by every other correct process<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Reliable Broadcast' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,82,65,65,117,102,84,76,65,86,120,79,48,49,99,114,108,48,89,53,105,120,72,88,53,102,108,72,75,103,84,106,82,79,87,86,71,87,68,85,55,77,83,53,100,101,65,78,10,75,88,114,74,48,66,77,81,99,75,74,100,56,82,102,117,103,65,57,70,57,89,83,102,108,110,105,115,65,84,78,111,50,83,115,74,70,54,104,107,115,50,80,90,43,69,52,109,98,98,84,113,97,112,108,106,106,102,84,75,110,109,49,122,10,52,103,53,54,106,82,83,113,97,100,78,66,65,97,84,114,57,77,65,109,69,87,66,82,118,49,88,54,119,88,109,86,103,67,117,68,89,50,100,109,70,101,117,120,72,110,89,85,112,81,72,112,90,43,105,110,67,55,67,105,78,100,85,113,10,72,119,107,107,75,73,109,99,68,106,55,75,83,112,43,53,50,56,106,67,116,79,84,83,48,76,105,81,107,75,101,81,55,99,86,72,89,82,69,103,110,49,87,100,49,106,109,75,66,101,89,47,88,121,111,120,100,107,112,88,53,75,53,82,10,112,104,72,73,53,98,81,82,72,72,99,122,75,57,111,52,77,119,74,50,107,120,73,79,108,83,78,83,106,122,110,105,76,121,47,120,97,112,110,68,108,48,106,121,89,107,100,53,82,48,52,120,102,70,90,102,71,74,66,102,70,114,73,65,10,77,103,88,76,79,54,87,112,113,118,66,87,105,73,106,100,70,57,51,50,86,113,82,99,47,66,68,110,117,75,68,103,54,121,89,53,90,81,107,53,118,80,102,104,78,117,111,56,112,83,109,76,82,105,112,111,107,115,109,112,105,55,84,47,10,111,84,65,65,122,43,108,47,56,78,105,83,103,66,71,72,100,57,49,102,55,113,82,56,102,67,78,49,89,89,118,70,112,76,117,113,99,85,48,116,50,121,67,89,49,50,70,55,49,67,90,79,72,51,109,85,70,84,54,88,52,114,71,71,10,83,116,100,73,55,78,86,65,89,112,74,110,57,120,71,77,117,112,48,51,120,111,83,112,115,66,98,103,54,88,84,67,68,55,52,98,69,122,81,83,88,110,77,47,84,108,53,57,74,116,88,82,65,76,120,122,57,100,102,68,119,77,119,97,10,98,54,99,54,85,113,83,77,113,109,119,113,120,88,116,86,71,100,112,70,101,89,53,105,117,72,108,84,66,110,80,105,118,112,77,72,82,86,72,72,122,114,79,90,82,71,68,79,82,51,103,78,48,115,76,79,114,43,79,108,102,53,89,89,10,88,77,109,70,49,122,84,80,100,52,102,51,78,117,88,102,86,73,97,115,51,111,56,86,90,65,71,49,84,120,52,103,104,51,88,57,97,107,107,49,82,105,122,85,110,98,97,52,89,77,116,112,108,43,49,98,55,120,103,79,101,43,97,76,10,56,67,85,89,114,115,72,69,99,66,107,117,102,80,88,66,97,65,68,115,53,90,55,119,84,116,113,81,114,107,116,107,81,86,117,67,111,118,120,116,79,53,116,77,75,90,50,52,51,112,103,50,114,82,75,43,105,89,117,103,71,75,102,83,10,119,67,111,66,52,121,122,49,102,65,113,71,67,111,112,52,87,57,113,108,115,76,102,112,110,80,117,122,97,100,120,82,107,74,72,100,82,84,97,121,65,120,49,56,113,81,55,75,111,108,51,78,68,65,106,76,73,51,57,120,68,68,112,73,10,103,84,82,53,55,118,109,68,109,52,107,107,66,65,69,51,102,86,65,84,116,97,100,51,107,74,121,53,90,101,49,77,98,103,109,67,55,72,54,57,51,51,103,118,81,115,48,65,81,84,54,119,72,86,114,112,86,115,118,115,75,105,115,75,10,57,97,69,73,72,75,84,68,72,72,48,112,71,56,86,65,102,113,70,86,71,113,109,56,53,90,81,111,65,97,113,115,55,51,80,81,114,119,88,85,47,65,82,43,72,49,57,109,108,113,103,115,99,69,54,54,56,55,121,70,119,116,99,107,10,70,120,51,112,82,97,88,102,70,56,67,57,113,56,108,98,114,76,111,83,50,72,99,102,120,113,118,100,53,113,107,110,116,51,102,71,112,90,47,105,104,85,76,115,83,104,82,83,65,71,70,53,74,56,86,48,78,67,103,48,118,110,54,117,10,110,83,54,67,103,107,112,75,88,100,71,108,86,84,122,119,54,81,68,79,110,87,110,87,107,65,50,81,83,104,79,104,115,114,116,86,115,49,86,73,112,68,87,114,84,75,65,97,51,106,77,86,86,113,71,85,102,66,77,61,10,61,82,52,80,100,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res3: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1510084541337_-1009117463","id":"20160830-154553_1603284544","dateCreated":"2017-11-07T19:55:41+0000","dateStarted":"2017-11-13T19:30:48+0000","dateFinished":"2017-11-13T19:30:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3136"},{"text":"%md\n\n### Part III: Causal-Order Reliable Broadcast ###\n\nA Causal-Order Reliable Broadcast Abstraction (CRB), in Kompics terms,  is a component that **provides** the following port *(already imported in the notebook)*.\n\n    class CausalOrderReliableBroadcast extends Port {\n      indication[CRB_Deliver];\n      request[CRB_Broadcast];\n    }\n       \nA **CRB** component should request `CRB_Broadcast` and indicate `CRB_Deliver` events, as defined below:\n\n    case class CRB_Deliver(src: Address, payload: KompicsEvent) extends KompicsEvent;\n    case class CRB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n\n\nAs you have already learnt from the course lectures, Causal-Order Reliable Broadcast adds the `Causal Delivery` property into the already existing properties of Reliable and Best-Effort Broadcast:\n\n1. Validity:  *If a correct process broadcasts a message m, then every correct process eventually delivers m.*\n2. No duplication: *No message is delivered more than once.*\n3. No creation: *If a process delivers a message m with sender s, then m was previously broadcast by process s.*\n4. Agreement: *If a message m is delivered by some correct process, then m is eventually delivered by every correct process.*\n5. **Causal delivery**: *For any message m1 that potentially caused a message m2, i.e., m1 → m2, no process delivers m2 unless it has already delivered m1.*\n\nHINT: The recommended algorithm to use in this assignment is *Waiting Causal Broadcast* and is described in page 4 within the following  [document](https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/f11d45d4cb0d9685c723dd00de427b8d/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/causalbroadcast.pdf) in the respective lecture.\n\n**Also mind, that to complete this part, you will first have to implement and test Best-Effort Broadcast and Reliable Broadcast, defined above.**\n\n\n#### Working with Vector Clocks ####\nWe have already provided you a `VectorClock` data structure **(already imported)** to aid you with the algorithm implementation. You can briefly see the supported operations below:\n\n```scala\n    case class VectorClock(var vc: Map[Address, Int]) {\n        def inc(addr: Address) : Unit  //increases the clock corresponding to the address @addr provided\n        def set(addr: Address, value: Int) : Unit //sets the clock of @addr to @value\n        def <=(that: VectorClock): Boolean   //returns true if this vector clock instance is lower or equal to @that\n    }\n    object VectorClock {\n        def empty(topology: scala.Seq[Address]): VectorClock //generates a vector clock that has an initial clock value of 0 for each address in the @topology provided\n        def apply(that: VectorClock): VectorClock //copy constructor of a vector clock. E.g. if vc1 is a vector clock vc2 = VectorClock(vc1) is a copy of vc1\n    }\n```\nIn case you want to check the full implementation of the VectorClock, you can find it in our full published gist [here](https://gist.github.com/senorcarbone/5c960ee27a67ec8b6bd42c33303fdcd2).\n","dateUpdated":"2017-11-13T18:41:21+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Part III: Causal-Order Reliable Broadcast</h3>\n<p>A Causal-Order Reliable Broadcast Abstraction (CRB), in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code>class CausalOrderReliableBroadcast extends Port {\n  indication[CRB_Deliver];\n  request[CRB_Broadcast];\n}\n</code></pre>\n<p>A <strong>CRB</strong> component should request <code>CRB_Broadcast</code> and indicate <code>CRB_Deliver</code> events, as defined below:</p>\n<pre><code>case class CRB_Deliver(src: Address, payload: KompicsEvent) extends KompicsEvent;\ncase class CRB_Broadcast(payload: KompicsEvent) extends KompicsEvent;\n</code></pre>\n<p>As you have already learnt from the course lectures, Causal-Order Reliable Broadcast adds the <code>Causal Delivery</code> property into the already existing properties of Reliable and Best-Effort Broadcast:</p>\n<ol>\n  <li>Validity: <em>If a correct process broadcasts a message m, then every correct process eventually delivers m.</em></li>\n  <li>No duplication: <em>No message is delivered more than once.</em></li>\n  <li>No creation: <em>If a process delivers a message m with sender s, then m was previously broadcast by process s.</em></li>\n  <li>Agreement: <em>If a message m is delivered by some correct process, then m is eventually delivered by every correct process.</em></li>\n  <li><strong>Causal delivery</strong>: <em>For any message m1 that potentially caused a message m2, i.e., m1 → m2, no process delivers m2 unless it has already delivered m1.</em></li>\n</ol>\n<p>HINT: The recommended algorithm to use in this assignment is <em>Waiting Causal Broadcast</em> and is described in page 4 within the following <a href=\"https://d37djvu3ytnwxt.cloudfront.net/assets/courseware/v1/f11d45d4cb0d9685c723dd00de427b8d/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block/causalbroadcast.pdf\">document</a> in the respective lecture.</p>\n<p><strong>Also mind, that to complete this part, you will first have to implement and test Best-Effort Broadcast and Reliable Broadcast, defined above.</strong></p>\n<h4>Working with Vector Clocks</h4>\n<p>We have already provided you a <code>VectorClock</code> data structure <strong>(already imported)</strong> to aid you with the algorithm implementation. You can briefly see the supported operations below:</p>\n<pre><code class=\"scala\">    case class VectorClock(var vc: Map[Address, Int]) {\n        def inc(addr: Address) : Unit  //increases the clock corresponding to the address @addr provided\n        def set(addr: Address, value: Int) : Unit //sets the clock of @addr to @value\n        def &lt;=(that: VectorClock): Boolean   //returns true if this vector clock instance is lower or equal to @that\n    }\n    object VectorClock {\n        def empty(topology: scala.Seq[Address]): VectorClock //generates a vector clock that has an initial clock value of 0 for each address in the @topology provided\n        def apply(that: VectorClock): VectorClock //copy constructor of a vector clock. E.g. if vc1 is a vector clock vc2 = VectorClock(vc1) is a copy of vc1\n    }\n</code></pre>\n<p>In case you want to check the full implementation of the VectorClock, you can find it in our full published gist <a href=\"https://gist.github.com/senorcarbone/5c960ee27a67ec8b6bd42c33303fdcd2\">here</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510084541337_-1009117463","id":"20160915-154115_478906095","dateCreated":"2017-11-07T19:55:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3137"},{"text":"\n\n//Causal Reliable Broadcast\n\ncase class DataMessage(timestamp: VectorClock, payload: KompicsEvent) extends KompicsEvent;\n\nclass WaitingCRB(init: Init[WaitingCRB]) extends ComponentDefinition {\n\n  //WaitingCRB Subscriptions\n  val rb = requires[ReliableBroadcast];\n  val crb = provides[CausalOrderReliableBroadcast];\n\n  //WaitingCRB Component State and Initialization\n  val (self, vec) = init match {\n    case Init(s: Address, t: Set[Address]@unchecked) => (s, VectorClock.empty(t.toSeq))\n  };\n\n  //  val V = VectorClock.empty(init match { case Init(_, t: Set[Address]) => t.toSeq })\n  var pending: ListBuffer[(Address, DataMessage)] = ListBuffer();\n  var lsn = 0;\n\n\n  //WaitingCRB Event Handlers\n  crb uponEvent {\n    case x: CRB_Broadcast => handle {\n     \n     /* WRITE YOUR CODE HERE  */\n     val w=Vec\n     w(self) = lsn\n     lsn = lsn + 1\n     trigger(RB_BroadCast((w,x.payload))->rb)\n    }\n  }\n\n  rb uponEvent {\n    case x@RB_Deliver(src: Address, msg: DataMessage) => handle {\n     \n        /* WRITE YOUR CODE HERE  */\n        pending.add((src, msg))\n        for(srcPendings <- pending){\n            for() \n        } \n    }\n  }\n}\n","dateUpdated":"2017-11-13T20:00:59+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510084541337_-1009117463","id":"20160728-150719_1155234225","dateCreated":"2017-11-07T19:55:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3138"},{"text":"checkCRB[BasicBroadcast, EagerReliableBroadcast, WaitingCRB]();","dateUpdated":"2017-11-13T18:41:21+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510084541338_-1007963216","id":"20160728-150824_64351046","dateCreated":"2017-11-07T19:55:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3139"},{"dateUpdated":"2017-11-13T18:41:21+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510084541338_-1007963216","id":"20171030-153216_12031065","dateCreated":"2017-11-07T19:55:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3140"}],"name":"Exercise: Broadcast Abstractions","id":"2CX4DS8T7","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}